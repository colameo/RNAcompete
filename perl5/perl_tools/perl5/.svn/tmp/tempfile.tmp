use strict;
use warnings;
use File::Temp qw/ tempfile /;
require 'align-nmers.pm';
require Exporter;

our @ISA    = qw(Exporter);
our @EXPORT = qw(generate_html_report);

sub generate_html_report{
	my ($inDir,$sBatchID,$nMotifSize,$suffix) = @_;
	print "generating html report for $suffix normalization...\n";
	
	my $outFileName = "RNAcompete_report_$suffix.html";
	
	my $setAFile = "$inDir/7mer_trimmedmeans_setA_$suffix.txt";
	my $setBFile = "$inDir/7mer_trimmedmeans_setB_$suffix.txt";
	my $outDir = $inDir . '/report_' . $suffix ;
	my $outFile = $outDir .'/'. $outFileName;
	my $logoDir =  "logo_images";
	my $scatterDir = "scatter_plots";
	# make directories;
	mkdir($outDir) unless -e $outDir;
	mkdir($outDir.'/'.$logoDir) unless -e $logoDir;
	mkdir($outDir.'/'.$scatterDir) unless -e $scatterDir;
	
	my $rasHeaders = _get_headers($setAFile);
	
	#print initial info
	open(my $out, ">$outFile") or die "couldn't open $outFile\n";
	
	my $title = "RNAcompete results for batch \"$sBatchID\"";
	my $nmer = "${nMotifSize}mer";
	
	print $out "<html>\n<head>\n<title>$title</title>\n</head>\n";
	print $out "<body>\n<h1>$title</h1>\n";
	print $out "<h2>Results based on $nmer analysis with $suffix normalization -- ";
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime;
	$year += 1900;
	$mon += 1;
	my $datetime = sprintf "%02d-%02d-%04d %02d:%02d", $mday, $mon, $year, $hour, $min;
	print $out "generated on $datetime</h2>\n";
	
	
	my $nSamples = (scalar @{$rasHeaders})-1;
	for (my $nCol=2; $nCol<=$nSamples ; $nCol++){
		my $sSample = $rasHeaders->[$nCol];	
		$sSample =~ s/\s//g;
		print $out "<p><a href=\"#$sSample\">Results for $sSample</a></p>\n";
	}
	
	
	
	
	# create all the scatterplots
<<<<<<< .mine
	print "making scatterplots\n";
	_get_scatter($outDir.'/'.$scatterDir,$setAFile,$setBFile);
=======
	my $scattertype = 0;
	if($suffix eq 'med_sub'){
		$scattertype = 1;
	} elsif ($suffix eq '7mer_zscore'){
		$scattertype = 2;
	} elsif ($suffix eq 'pca'){
		$scattertype = 3;
	}
	_get_scatter($outDir.'/'.$scatterDir,$setAFile,$setBFile,$scattertype);
>>>>>>> .r21

	#print results for each protein
	#print top 10 Nmers;
<<<<<<< .mine
	print "getting top Nmers & logos\n";
	for (my $nCol=2; $nCol<=($nSamples*2) ; $nCol+=2){
=======
	for (my $nCol=2; $nCol<=$nSamples ; $nCol++){
>>>>>>> .r21
		my $sSample = $rasHeaders->[$nCol];	
		$sSample =~ s/\s//g;
		print $out "<hr style=\"width: 70%\"/>\n";
		print $out "<a name=\"$sSample\"></a>\n";
		print $out "<h2>Results for $sSample</h2>\n";
		#get scatterplots and print
		my $scatterFile = "$scatterDir/${sSample}_setAsetBscatter.png";
		print $out "<h3>Set A vs Set B $nmer scatterplot</h3>\n";
		print $out "<img src=\"$scatterFile\" />\n";
		
		# get top 10, top 20, top 100 logos
		my @anTop = (10,20,100);
		foreach my $nTop (@anTop){
		
			my $rasTopnmersSetA = _get_top_nmers($setAFile,$nCol,$nTop);
			my $rasAlignedTopSetA = align_and_print($rasTopnmersSetA);
			my $rasTopnmersSetB = _get_top_nmers($setBFile,$nCol,$nTop);
			my $rasAlignedTopSetB = align_and_print($rasTopnmersSetB);
		
			my $tableHeader =  "<table border=1 cellpadding=10px>\n<tr><th>Set A</th><th>Set B</th></tr>\n";
	
			# print the nmers for the top 10 only
			if($nTop == 10){
				_print_top_nmers($out,$tableHeader,$nTop,$rasTopnmersSetA,$rasAlignedTopSetA,$rasTopnmersSetB,$rasAlignedTopSetB);
			}
		
			my $logoFileSetA = "$logoDir/${sSample}_logo_SetA_top$nTop.png";
			my $logoFileSetB = "$logoDir/${sSample}_logo_SetB_top$nTop.png";
		
			my $return = _get_logo("$outDir/$logoFileSetA",$rasAlignedTopSetA);
			$return = _get_logo("$outDir/$logoFileSetB",$rasAlignedTopSetB);
			
			print $out "<h3>Logo generated from top $nTop ${nmer}s</h3>\n";
			print $out $tableHeader;
			print $out "<tr>\n";
			print $out "<td><img src=\"$logoFileSetA\" /></td>\n";
			print $out "<td><img src=\"$logoFileSetB\" /></td>\n";
			print $out "</tr></table>\n";
		}
		
	}
	
	
	
	print $out "</body>\n</html>\n";
	
	close($out);
}

sub _get_scatter{
	my ($scatterDir,$setAFile,$setBFile,$scattertype) = @_;
	my $matlab = join('; ',
						"outdir = '$scatterDir'",
						"addpath('/Users/eskay/Documents/work/grad/Projects/RNAcompeteDB/working/rnacompete/trunk/matlab')",
						"setAFile = '$setAFile'",
						"setBFile = '$setBFile'",
						"type = $scattertype",
						"run_makescatters",
						"exit;");
	`matlab -nojvm -nosplash -nodisplay -r "$matlab"  1>&2`;
}

sub _print_top_nmers{
	my ($out,$tableHeader,$nTop,$rasTopnmersSetA,$rasAlignedTopSetA,$rasTopnmersSetB,$rasAlignedTopSetB) = @_;
	# print top 10 nmers
	print $out "<h3>Top $nTop Nmers</h3>\n";
	print $out $tableHeader;
	print $out "<tr>\n";
	print $out "<td>\n<code>".join("<br/>\n",@{$rasTopnmersSetA})."</code>\n</td>\n";
	print $out "<td>\n<code>".join("<br/>\n",@{$rasTopnmersSetB})."</code>\n</td>\n";
	print $out "</tr></table>\n";
	# print aligned top 10 nmers
	print $out "<h3>Top $nTop Nmers, aligned</h3>\n";
	print $out $tableHeader;
	print $out "<tr>\n";
	print $out "<td>\n<code>".join("<br/>\n",@{$rasAlignedTopSetA})."</code>\n</td>\n";
	print $out "<td>\n<code>".join("<br/>\n",@{$rasAlignedTopSetB})."</code>\n</td>\n";
	print $out "</tr></table>\n";

}

sub _get_logo{
	my ($logoFile,$rasAligned) = @_;
	# write temporary .fa file
	my($fh,$tmpFaFile) = tempfile(UNLINK => 1);
	my $i = 1;
	foreach my $seq (@{$rasAligned}){
		print $fh ">seq_$i\n$seq\n";
		$i++;
	}
	my $cmd = "(weblogo -F png  -A rna --errorbars NO --color-scheme classic --fineprint '' --weight 0.0001 < $tmpFaFile > $logoFile) &> /dev/null";
	#print $cmd."\n";
	`$cmd`;
	return $logoFile;
}

sub _get_top_nmers{
	my ($inFile,$nCol,$nTop) = @_;
	my $nSortCol = $nCol+1;
	my($fh,$tmpFile) = tempfile(UNLINK => 1);
	my $cmd = "sort -nrk $nSortCol $inFile > $tmpFile";
	#print "$cmd\n";
	`$cmd`;
	open(my $in, "$tmpFile") or die "couldn't open $tmpFile\n";
	my $sLine = <$in>; #header
	my @asResult = ();
	while(<$in>){
		my $sNmer = (split("\t"))[0];
		push(@asResult, $sNmer);
		last if $#asResult == ($nTop-1);
	}
	return \@asResult;
}

sub _get_headers{
	my $inFile = shift;
	open(my $in, $inFile) or die "couldn't open $inFile\n";
	my $sLine = <$in>;
	chomp ($sLine); chop($sLine) while $sLine =~ /\r/;
	close($in);
	my @asHeaders = split("\t",$sLine);
	return \@asHeaders;
}
